Social Islands

Visualization of social groups of your Facebook network.

Go to localhost:3000 and start logging in.

Resque
======

We have the following queues:

viz
---

This queue is read by the Java app (Jesque... class) to read a render request from the front-end.

push_to_web
-----------

When the render request is completed, the Java backend willll push a new job to the `push_to_web`
queue which the front-end uses to asynchronously notify the web client.


User ID override
================

In development mode only (for security reasons), you can append a query parameter to override
the user_id of the profile being rendered. Default is the currently logged in user.

    http://localhost:3000/facebook?user_id=123456789abc

EventSource HQ (ESHQ)
=====================

This is a Heroku add-on service implementing "Server-Side Events", an HTML5 technology for pushing data from
the sever to the client. It's a lighter-weight technology than Websockets, but it doesn't support bi-directional
communication. To run the app locally with this in place, you need to set the ESHQ environment veriables,
`ESHQ_KEY`, `ESHQ_SECRET` and `ESHQ_URL` which can be found from `heroku config`.

Debugging
=========

Mongo
-----

I've added a tool `script/mongo_rails` which will launch the MongoDB console
connected to the currently active environment. By default this is the development
database. To launch the production database, specify it like this:

    script/mongo_rails RAILS_ENV=production

**Be careful this is the live database!!!**

This command uses the heroku gem to dynamically discover the Mongo connection
parameters and then launched the Mongo console with these.

Redis
-----

To debug the production redis database, you can use the `redis-cli` tool to
connect to the production redis on Heroku. Run `heroku config` to see what
connection parameters you need and pass these to switches for the command line
tool. Don't save any passwords into files!